#include <TimerOne.h>

// Pins
const int tempSensorPin = A0; // Analog pin for temperature sensor
const int fanPin = 9;         // PWM pin for fan
const int redLEDPin = 7;      // Digital pin for red LED
const int greenLEDPin = 6;    // Digital pin for green LED
const int buttonPin = 2;      // Interrupt button pin

// Variables
float temperature = 0.0;
const float TEMP_THRESHOLD = 30.0; // Temperature threshold in °C
volatile bool resetFlag = false;   // Interrupt flag
int state = 0;                     // Finite state machine: 0 = Idle, 1 = Active, 2 = Error

// Function prototypes
void setup();
void loop();
void readTemperature();
void updateFanSpeed();
void manageState();
void handleButtonPress();
void sendSerialData();

// Setup function
void setup() {
  // Pin configurations
  pinMode(fanPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  // Serial communication
  Serial.begin(9600);

  // Timer setup for temperature reading every 500ms
  Timer1.initialize(500000); // 500ms
  Timer1.attachInterrupt(readTemperature);

  // Attach interrupt for button press
  attachInterrupt(digitalPinToInterrupt(buttonPin), handleButtonPress, FALLING);

  // Initial state
  state = 0;
}

// Loop function
void loop() {
  manageState();  // Manage state transitions
  sendSerialData(); // Send data over Serial
  delay(100);     // Short delay to reduce CPU load
}

// Modularized functions

// Interrupt routine to read temperature
void readTemperature() {
  int analogValue = analogRead(tempSensorPin);
  temperature = (analogValue * 5.0 / 1023.0) * 100.0; // Convert to °C
}

// PWM control for fan speed based on temperature
void updateFanSpeed() {
  int speed = map(temperature, 0, 50, 0, 255); // Map temperature to PWM range
  speed = constrain(speed, 0, 255);           // Ensure PWM is within range
  analogWrite(fanPin, speed);
}

// State machine for system management
void manageState() {
  switch (state) {
    case 0: // Idle
      digitalWrite(redLEDPin, LOW);
      digitalWrite(greenLEDPin, HIGH);
      analogWrite(fanPin, 0); // Fan off
      if (temperature > TEMP_THRESHOLD) {
        state = 1; // Transition to Active
      }
      break;

    case 1: // Active
      digitalWrite(redLEDPin, LOW);
      digitalWrite(greenLEDPin, HIGH);
      updateFanSpeed();
      if (temperature < TEMP_THRESHOLD - 5) {
        state = 0; // Transition back to Idle
      }
      break;

    case 2: // Error (triggered by button press)
      digitalWrite(redLEDPin, HIGH);
      digitalWrite(greenLEDPin, LOW);
      analogWrite(fanPin, 0); // Fan off
      if (resetFlag) {
        state = 0; // Reset to Idle
        resetFlag = false;
      }
      break;
  }
}

// Interrupt Service Routine for button press
void handleButtonPress() {
  state = 2;   // Transition to Error state
  resetFlag = true; // Set reset flag
}

// Serial communication to send temperature and state
void sendSerialData() {
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" °C | State: ");
  switch (state) {
    case 0: Serial.println("Idle"); break;
    case 1: Serial.println("Active"); break;
    case 2: Serial.println("Error"); break;
  }
}
